@page "/create"
@page "/edit/{Id:int}"

@inject IApiClient apiClient
@inject NavigationManager NavManager

<h3>@title</h3>

<EditForm Model="@category" OnSubmit=@FormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label for="title" class="col-sm-2 col-form-label">
            Title
        </label>
        <div class="col-sm-10">
            <InputText id="title" class="form-control" placeholder="Title" @bind-Value="category.Title" />
            <ValidationMessage For="@(() => category.Title)" />
        </div>
    </div>
    <div class="form-group row" style="margin-top:20px">
        <label for="title" class="col-sm-2 col-form-label">
        </label>
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private Category category = new Category();
    private string title = "Edit";

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(category);
        messageStore = new ValidationMessageStore(editContext);

        if (Id == 0)
        {
            title = "Create new";
            return;
        }

        var result = await apiClient.Get(Id);

        category = result.Value;
    }

    private async Task FormSubmitted()
    {
        var result = await apiClient.Save(category);
        if (result.HasError)
        {
            foreach (var key in result.Errors.Keys)
            {
                foreach (var error in result.Errors[key])
                {
                    messageStore.Add(() => category.Title, error);
                }
            }

            return;
        }

        NavManager.NavigateTo("/");
    }
}
